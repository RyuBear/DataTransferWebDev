@model DataTransferWeb.ViewModels.CodeMapVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm("Save", "CodeMap", FormMethod.Post, new { Id = "IndexForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(x => x.ViewStatus)
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control", @readonly = true })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModeType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="ModeType" name="ModeType" class="form-control" readonly>
                    <option value="@Model.ModeType" selected>@Model.ModeType</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Format, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="Format" name="Format" class="form-control" readonly>
                    <option value="@Model.Format" selected>@Model.Format</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SettingName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="SettingName" name="SettingName" class="form-control" readonly>
                    <option value="@Model.SettingName" selected>@Model.SettingName</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FieldName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="FieldName" name="FieldName" class="form-control" readonly>
                    <option value="@Model.FieldName" selected>@Model.FieldName</option>
                </select>
                @Html.ValidationMessageFor(model => model.FieldName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewBeforeValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(x => x.BeforeValue)
                @Html.TextBox("NewBeforeValue", Model.BeforeValue, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NewBeforeValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AfterValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AfterValue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AfterValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />

                <input type="button" value="Cancel" class="btn btn-primary" onclick="history.go(-1);" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Model.SaveResult
            </div>
        </div>
    </div>
}
